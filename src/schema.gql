# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Book {
  """Authors of the book"""
  authors: [String!]

  """Description of the book"""
  description: String

  """Categories of the book"""
  genres: [String!]!

  """description of the book"""
  imageUrls: ImageUrls

  """The language of the book"""
  language: String

  """The language of the book"""
  pdfLink: String
  providerId: String!

  """Official subtitle of the book"""
  subtitle: String

  """Official name of the book"""
  title: String!

  """The total page count of the book"""
  totalPageCount: Float!
}

input CreateProposalInput {
  """Description of the book"""
  additionalInfo: String!

  """Item submitted by the proposer"""
  desiredItemId: String!

  """ID of the available book"""
  listingId: String!

  """Item submitted by the proposer"""
  offeredItemId: String!

  """Condition of the product"""
  productCondition: String!

  """Title of the listing"""
  title: String
}

input CreateUserInput {
  city: String!
  country: String!
  email: String!
  facebookId: String
  firstName: String!
  isoCountryCode: String!
  lastName: String!
  password: String!
  profilePhoto: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteUserInput {
  _id: ID!
}

input FacebookAuthDto {
  city: String!
  country: String!
  identityToken: String!
  isoCountryCode: String!
}

input FindBookInput {
  _id: ID
  name: String
}

input FindSingleUserInput {
  _id: ID
  email: String
}

input FindUserInput {
  _id: ID
  email: String
  facebookId: String
  firstName: String
  forgotPasswordCode: Float
  lastName: String
  verificationCode: Float
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordResponse {
  code: String!
  message: String!
}

type ImageUrls {
  smallThumbnail: String!
  thumbnail: String!
}

input ImageUrlsInput {
  smallThumbnail: String!
  thumbnail: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Listing {
  _id: ID!

  """description of the listing"""
  description: String!

  """Contains information about the requested book."""
  desiredBookInfo: Book!

  """Images of the book"""
  imageUrls: [String!]!
  listingOwnerId: ID!

  """Contains information about the book that the user is offering."""
  offeredBookInfo: Book!

  """The condition of the book"""
  productCondition: String!

  """IDs of the proposals received"""
  proposalsIds: [ID!]!

  """Used for the admin to approve the listing"""
  status: String!

  """Title of the listing"""
  title: String!
}

input LoginInput {
  city: String
  country: String

  """email of the user"""
  email: String!
  isoCountryCode: String

  """password of the user"""
  password: String!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Mutation {
  addListing(availableBookId: String!, description: String!, desiredBookId: String!, file: Upload!, productCondition: String!): String!
  authenticateWithFacebook(input: FacebookAuthDto!): LoginResponse!
  authenticateWithGoogle(input: OauthInput!): LoginResponse!
  deleteUser(input: DeleteUserInput!): Boolean!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
  login(input: LoginInput!): LoginResponse!
  removeBook(id: Int!): Book!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse!
  respondToConnection(connectionId: String!, status: String!): Boolean!
  sendConnectionRequest(connectionId: String!): User!
  sendProposal(createProposalInput: CreateProposalInput!, file: Upload!): String!
  signup(input: CreateUserInput!): LoginResponse!
  updateProposalStatus(_id: String!, status: String!): Proposal!
  updateUserBookmarks(listingId: String!): User!
}

type Notification {
  """The unique identifier for the notification."""
  _id: ID!

  """The identifier for the listing (if applicable)"""
  listingId: ID

  """The body of the message."""
  message: String!

  """
  The metadata of the notification, it's different for each notification type
  """
  metadata: NotificationMetadata!

  """The identifier for proposal (if applicable)"""
  proposalId: ID

  """The user who should receive the notification."""
  recipientId: ID!

  """
  The user who initiated the action that triggered the notification (if applicable).
  """
  senderId: ID

  """The status of the notification (e.g., "unread", "read")."""
  status: String!

  """The title of the message."""
  title: String!

  """
  The type of notification (e.g., "proposal_received", "item_traded", etc.)
  """
  type: String!
}

type NotificationMetadata {
  proposalId: ID
  status: String
}

input OauthInput {
  city: String!
  country: String!
  email: String!
  firstName: String!
  isoCountryCode: String!
  lastName: String!
  profilePhoto: String
}

type Proposal {
  _id: ID!

  """description of the proposal"""
  additionalInfo: String!

  """The date when the entity was created"""
  createdAt: DateTime!

  """
  Contains information about the item that the trader wants to trade for.
  """
  desiredItem: Book!

  """Images of the book"""
  imageUrls: [String!]!
  listingId: ID!

  """Contains information about the item offered by the trader."""
  offeredItem: Book!

  """The language of the book"""
  productCondition: String!
  recipientId: ID!
  senderId: ID!

  """Status of the proposal"""
  status: String!

  """Title of the proposal"""
  title: String!

  """The last date when the entity was updated"""
  updatedAt: DateTime!
}

type Query {
  bookmarks: [Listing!]!
  books: [Book!]!
  connectionsProfiles(userId: String!): [User!]!
  feed: [Listing!]!
  info(input: FindSingleUserInput!): User!
  listing(_id: String!): Listing!
  listings: [Listing!]!
  me: User!
  notifications: [Notification!]!
  profile: User!
  proposal(_id: String!): Proposal!
  proposals: [Proposal!]!
  searchBook(input: FindBookInput!): [Book!]!
  user(input: FindUserInput!): User!
  userListings(_id: String!): [Listing!]!
  users: [User!]!
}

input ResetPasswordInput {
  email: String!
  password: String!
}

type ResetPasswordResponse {
  message: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ID!

  """IDs of listings bookmarked by the user"""
  bookmarkedListingIds: [ID!]!

  """Other users that connected with the user"""
  connectionsIds: [ID!]!

  """The date when the entity was created"""
  createdAt: DateTime!

  """Email address of the user"""
  email: String!

  """Facebook ID (users who joined the app with facebook)"""
  facebookId: String

  """User's first name"""
  firstName: String!

  """Code used whenever the user wants to reset their password"""
  forgotPasswordCode: String!

  """To show if the user veirifed their email or not"""
  isVerified: String!

  """User's last name"""
  lastName: String!

  """Users location attributes"""
  location: JSONObject!

  """User's password"""
  password: String!

  """Other users that connected with the user"""
  pendingUserConnectionRequestsIds: [ID!]!

  """User's profile picture"""
  profilePhoto: String!

  """
  A number that is responsible for the reputation of the user. The higher the more trusted
  """
  reputation: Float!

  """User role"""
  role: String!

  """IDs of the proposals sent"""
  sentProposalsIds: [ID!]!

  """The last date when the entity was updated"""
  updatedAt: DateTime!

  """Verification code on registration"""
  verificationCode: String!
}